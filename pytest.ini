[pytest]
# Configure pytest options

# Automatically detect and run async tests
asyncio_mode = auto

# Add the project root to the Python path for tests
python_files = test_*.py
python_functions = test_*
python_classes = Test*

# Show detailed assertion information
addopts =
    -v
    --cov=myjobspyai
    --cov-report=term-missing
    --cov-report=xml
    --doctest-modules
    --durations=10
    -n auto
    --dist=loadfile
    -x
    --reruns 3
    --reruns-delay 1
    --html=test-results/pytest-report.html
    --self-contained-html

# Markers for different test types
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: integration tests
    unit: unit tests
    e2e: end-to-end tests
    performance: performance tests
    requires_internet: tests that require internet access
    requires_docker: tests that require Docker

# Enable warnings
filterwarnings =
    # Enable deprecation warnings
    always::DeprecationWarning
    always::PendingDeprecationWarning

    # Ignore specific warnings
    ignore:.*unclosed.*:ResourceWarning
    ignore:There is no current event loop:RuntimeWarning

# Test paths configuration
testpaths =
    tests/unit
    tests/integration
    tests/e2e
    tests/performance

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_cli_date_format = %Y-%m-%d %H:%M:%S

# JUnit XML output (for CI/CD)
junit_suite_name = myjobspyai-tests
junit_logging = all

# Test output settings
log_format = %(asctime)s %(levelname)s %(message)s
log_date_format = %Y-%m-%d %H:%M:%S

# Disable test collection output when running with -v
console_output_style = classic

# Configure test timeout (in seconds)
timeout = 300

# Configure test ordering
# Disable random test ordering by default to make tests more reproducible
test_random_order = false
