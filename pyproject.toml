[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["myjobspyai"]
package-dir = { "" = "src" }

[project]
name = "myjobspyai"
version = "0.1.0"
description = "MyJobSpy AI - AI-powered job search and analysis tool"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "jobspy>=1.0.0",
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
    "rich>=13.0.0",
    "PyYAML>=6.0.0",
    "requests>=2.28.0",
    "aiohttp>=3.8.0",
    "pandas>=1.5.0",
    "numpy>=1.23.0",
    "tqdm>=4.65.0",
    "python-dateutil>=2.8.2",
    "python-multipart>=0.0.6",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.0.270",
    "mypy>=1.0.0",
    "pytest>=7.3.1",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "types-python-dateutil>=2.8.0",
    "types-pyyaml>=6.0.0",
    "types-requests>=2.28.0",
]

[project.urls]
homepage = "https://github.com/yourusername/myjobspyai"
repository = "https://github.com/yourusername/myjobspyai"
documentation = "https://github.com/yourusername/myjobspyai#readme"
"bug-tracker" = "https://github.com/yourusername/myjobspyai/issues"
"changelog" = "https://github.com/yourusername/myjobspyai/releases"

[project.scripts]
myjobspyai = "myjobspyai.__main__:main"

[tool.black]
line-length = 88
target-version = ["py39"]
include = '\.pyi?$'
skip-string-normalization = true

[tool.ruff]
line-length = 88
target-version = "py39"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "PL", # pylint
]
ignore = [
    "E501",  # Line too long - handled by black
    "W503",  # Line break occurred before a binary operator
    "E203",  # Whitespace before ':' - conflicts with black
]

[tool.ruff.isort]
known-first-party = ["myjobspyai"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pydantic.*",
    "pydantic_*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
pythonpath = [".", "src"]
addopts = "-v --cov=myjobspyai --cov-report=term-missing"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
]

[coverage:run]
source = ["myjobspyai"]
omit = [
    "**/__init__.py",
    "**/tests/**",
]

[coverage:report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
target-version = ['py38']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v -s --cov=src --cov-report=term-missing"

[tool.coverage.run]
source = ["src"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == '__main__':",
    "pass",
    "raise ImportError",
]
